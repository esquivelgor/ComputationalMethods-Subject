var <- curve_multiple(g, start = 0.5)
plot(g, edge.arrow.size=.3,edge.curved=0.1, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors,edge.curved=var )
var <- curve_multiple(g, start = 0.5)
#set.seed(12)
plot(g, edge.arrow.size=.3,edge.curved=0.1, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors,edge.curved=var )
#set.seed(12)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=var )
curves <- curve_multiple(g, start = 0.5)
set.seed(12)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
curves <- curve_multiple(g, start = 0.2)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
curves <- curve_multiple(g, start = 0.8)
set.seed(12)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
node.types <- c(1, rep(2, length(edge.labels)-2), 3)
mapping.colors <- c("green","white", "red", "blue")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(12)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
unique(nodes)
lenght(unique(nodes))
length(unique(nodes))
node.types <- c(1, rep(2, length(unique(nodes))), 3)
node.types <- c(1, rep(2, length(unique(nodes))-2), 3)
mapping.colors <- c("green","white", "red", "blue")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(12)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
## Input user example
string <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
# Clear
rm(list = ls())
string <- "S -> aA B -> a S -> bB A -> bB A -> c B -> c"
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
edgesFinalZ <- str_replace_all(edgesFinal, "(?<=[a-z])(?!$)|(?<=[a-z])$", "Z")
stringUpdated <- append(edgesCompleted, edgesFinalZ)
?curve_multiple
## Input user example
string <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
string <- str_replace_all(string, "\n", " ")
string <- "S -> aA B -> a S -> bB A -> bB A -> c B -> c"
## Input user example
string <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
string <- str_replace_all(string, "\n", " ")
string <- "S -> aA B -> a S -> bB A -> bB A -> c B -> c"
string <- str_replace_all(string, "\n", " ")
## Input user example
string <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
## Input user example
string <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
string <- str_replace_all(string, "\n", " ")
string <- str_replace_all(string, "(\n)|(\s*\n)", " ")
string <- str_replace_all(string, "(\n)|(\\s*\n)", " ")
string2 <- "S -> aA B -> a S -> bB A -> bB A -> c B -> c"
## Input user example
string <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
string <- str_replace_all(string, "(\n)|(\s*\n)", " ")
string <- str_replace_all(string, "(\n)|(\\s*\n)", " ")
string2 <- "S -> aA B -> a S -> bB A -> bB A -> c B -> c"
awards <- c("Won 1 Oscar.",
"Won 1 Oscar. Another 9 wins & 24 nominations.",
"1 win and 2 nominations.",
"2 wins & 3 nominations.",
"Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
"4 wins & 1 nomination.")
sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
library(igraph)
# Input user example
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
library(igraph)
# Input user example
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
library(stringr)
# Input user example
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract edges
edgesCompleted <- str_extract_all(string, "\\([A-Z],[A-Z],[a-z]\\)")[[1]]
edgesFinal <- str_extract_all(string, "\\([A-Z],[A-Z]\\.,([a-z]|.)\\)")[[1]]
stringUpdated <- append(edgesCompleted, edgesFinal)
nodesCompleted <- unlist(str_extract_all(edgesCompleted, "[A-Z]"))
nodesFinal <- unlist(str_extract_all(edgesFinal, "[A-Z]"))
nodes <- append(nodesCompleted, nodesFinal)
nNodesCompleted <- length(unique(unlist(str_extract_all(edgesCompleted, "(?!S)[A-Z]"))))
nNodesFinal <- length(unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\."))))
node.types <- c(1, rep(2, nNodesCompleted), rep(3, nNodesFinal))
g <- graph(nodes, directed = TRUE)
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]|-"))
mapping.colors <- c("green","white", "red")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
edge.labels
class(edge.labels)
mapping.colors <- c("green","yellow", "red")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract edges
edgesCompleted <- str_extract_all(string, "\\([A-Z],[A-Z],[a-z]\\)")[[1]]
edgesFinal <- str_extract_all(string, "\\([A-Z],[A-Z]\\.,([a-z]|.)\\)")[[1]]
stringUpdated <- append(edgesCompleted, edgesFinal)
nodesCompleted <- unlist(str_extract_all(edgesCompleted, "[A-Z]"))
nodesFinal <- unlist(str_extract_all(edgesFinal, "[A-Z]"))
nodes <- append(nodesCompleted, nodesFinal)
nNodesCompleted <- length(unique(unlist(str_extract_all(edgesCompleted, "(?!S)[A-Z]"))))
nNodesFinal <- length(unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\."))))
node.types <- c(1, rep(2, nNodesCompleted), rep(3, nNodesFinal))
g <- graph(nodes, directed = TRUE)
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]|-"))
mapping.colors <- c("green","yellow", "red")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
mapping.colors <- c("green","yellow", "orange")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
# Clear
rm(list = ls())
library(igraph)
library(stringr)
# Input user example
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract edges
edgesCompleted <- str_extract_all(string, "\\([A-Z],[A-Z],[a-z]\\)")[[1]]
edgesFinal <- str_extract_all(string, "\\([A-Z],[A-Z]\\.,([a-z]|.)\\)")[[1]]
stringUpdated <- append(edgesCompleted, edgesFinal)
nodesCompleted <- unlist(str_extract_all(edgesCompleted, "[A-Z]"))
nodesFinal <- unlist(str_extract_all(edgesFinal, "[A-Z]"))
nodes <- append(nodesCompleted, nodesFinal)
nNodesCompleted <- length(unique(unlist(str_extract_all(edgesCompleted, "(?!S)[A-Z]"))))
nNodesFinal <- length(unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\."))))
node.types <- c(1, rep(2, nNodesCompleted), rep(3, nNodesFinal))
g <- graph(nodes, directed = TRUE)
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]|-"))
mapping.colors <- c("green","yellow", "orange")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
# Clear
rm(list = ls())
library(igraph)
library(stringr)
# Input user example
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract edges
edgesCompleted <- str_extract_all(string, "\\([A-Z],[A-Z],[a-z]\\)")[[1]]
edgesFinal <- str_extract_all(string, "\\([A-Z],[A-Z]\\.,([a-z]|.)\\)")[[1]]
stringUpdated <- append(edgesCompleted, edgesFinal)
nodesCompleted <- unlist(str_extract_all(edgesCompleted, "[A-Z]"))
nodesFinal <- unlist(str_extract_all(edgesFinal, "[A-Z]"))
nodes <- append(nodesCompleted, nodesFinal)
nNodesCompleted <- length(unique(unlist(str_extract_all(edgesCompleted, "(?!S)[A-Z]"))))
nNodesFinal <- length(unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\."))))
node.types <- c(1, rep(2, nNodesCompleted), rep(3, nNodesFinal))
g <- graph(nodes, directed = TRUE)
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]|-"))
mapping.colors <- c("green","yellow", "orange")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
?strptime
# Load the gapminder package
library(gapminder)
install.packages("gapminder")
# Load the gapminder package
library(gapminder)
# Load the dplyr package
library(dplyr)
install.packages("dplyr")
library(gapminder)
library(dplyr)
library(dplyr)
# Filter the gapminder dataset for the year 1957
gapminder %>%
filter(year == "1957")
# Filter the gapminder dataset for the year 1957
gapminder %>% filter(year == "1957")
# Filter for China in 2002
gapminder %>%
filter(year == "2002" & country == "China")
?arrange
# Load the ggplot2 package as well
library(gapminder)
library(dplyr)
library(ggplot2)
# Create gapminder_1952
gapminder_1952 <- gapminder %>% filter(year == 1952)
# Change to put pop on the x-axis and gdpPercap on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
geom_point()
?ggplot
?mapping
# Change this plot to put the x-axis on a log scale
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10()
# Change this plot to put the x-axis on a log scale
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point()
# Change this plot to put the x-axis on a log scale
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10()
# Scatter plot comparing pop and lifeExp, with color representing continent
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, )) +
geom_point() +
scale_x_log10()
# Scatter plot comparing pop and lifeExp, with color representing continent
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, )) +
geom_point()
# Scatter plot comparing pop and lifeExp, with color representing continent
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, )) +
geom_point() +
scale_x_log10()
# Add the size aesthetic to represent a country's gdpPercap
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +
geom_point() +
scale_x_log10()
?Facet
?facet_wrap
# Scatter plot comparing pop and lifeExp, faceted by continent
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent)
gapminder_Filtered <- gapminder %>%
filter(year >= 1952 & year <= 2007)
# Scatter plot comparing gdpPercap and lifeExp, with color representing continent
# and size representing population, faceted by year
ggplot(gapminder_Filtered, aes(x = gdpPercap, y = lifeExp), color = continent, size = pop) +
geom_point() +
scale_x_log10() +
facet_wrap(~ year)
# Scatter plot comparing gdpPercap and lifeExp, with color representing continent
# and size representing population, faceted by year
ggplot(gapminder_Filtered, aes(x = gdpPercap, y = lifeExp), color = continent, size = pop) +
geom_point() +
scale_x_log10() +
facet_grid(~ year)
# Summarize to find the median life expectancy
gapminder %>%
summarize(medianLifeExp = median(lifeExp))
# Filter for 1957 then summarize the median life expectancy
gapminder %>%
filter(year == 1957) +
summarize(medianLifeExp = median(lifeExp))
# Filter for 1957 then summarize the median life expectancy
gapminder %>%
filter(year == 1957) %>%
summarize(medianLifeExp = median(lifeExp))
# Filter for 1957 then summarize the median life expectancy and the maximum GDP per capita
gapminder %>%
filter(year == 1957) %>%
summarize(medianLifeExp = median(lifeExp)) %>%
summarize(maxGdpPercap = max(GdpPerCap))
# Filter for 1957 then summarize the median life expectancy and the maximum GDP per capita
gapminder %>%
filter(year == 1957) %>%
summarize(medianLifeExp = median(lifeExp)) %>%
summarize(maxGdpPercap = max(GdpPerCap))
# Filter for 1957 then summarize the median life expectancy and the maximum GDP per capita
gapminder %>%
filter(year == 1957) %>%
summarize(medianLifeExp = median(lifeExp)) %>%
summarize(maxGdpPercap = max(GdpPercap))
gapminder
# Filter for 1957 then summarize the median life expectancy and the maximum GDP per capita
gapminder %>%
filter(year == 1957) %>%
summarize(medianLifeExp = median(lifeExp)) %>%
summarize(maxGdpPercap = max(gdpPercap))
gapminder %>%
filter(year == 1957) %>%
summarize(medianLifeExp = median(lifeExp)) %>%
mutate(maxGdpPercap = max(gdpPercap))
gapminder$gdpPercap
# Filter for 1957 then summarize the median life expectancy and the maximum GDP per capita
gapminder %>%
filter(year == 1957) %>%
summarize(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
# Clear
rm(list = ls())
library(igraph)
library(stringr)
# Input user example
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
# Input user example
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract edges
edgesCompleted <- str_extract_all(string, "\\([A-Z],[A-Z],[a-z]\\)")[[1]]
edgesFinal <- str_extract_all(string, "\\([A-Z],[A-Z]\\.,([a-z]|.)\\)")[[1]]
stringUpdated <- append(edgesCompleted, edgesFinal)
nodesCompleted <- unlist(str_extract_all(edgesCompleted, "[A-Z]"))
nodesFinal <- unlist(str_extract_all(edgesFinal, "[A-Z]"))
nodes <- append(nodesCompleted, nodesFinal)
nNodesCompleted <- length(unique(unlist(str_extract_all(edgesCompleted, "(?!S)[A-Z]"))))
nNodesFinal <- length(unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\."))))
node.types <- c(1, rep(2, nNodesCompleted), rep(3, nNodesFinal))
g <- graph(nodes, directed = TRUE)
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]|-"))
mapping.colors <- c("green","yellow", "orange")
node.colors <- mapping.colors[node.types]
# Identify non-deterministic spaces
nonDeterministicSpaces <- c()
for (node in unique(nodes)) {
outputs <- unique(str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z]\\)"))[[1]])
expectedOutputs <- str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z]\\.,([a-z]|.)\\)"))[[1]]
if (length(outputs) != length(expectedOutputs)) {
nonDeterministicSpaces <- c(nonDeterministicSpaces, outputs)
}
}
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size = .3, vertex.label.cex = 0.8, vertex.size = 35, vertex.frame.color = "gray",
vertex.label.color = "black", edge.label = edge.labels, vertex.color = node.colors,
edge.curved = curves)
# Mark non-deterministic spaces
nonDeterministicSpaces <- unique(nonDeterministicSpaces)
for (space in nonDeterministicSpaces) {
spaceLabel <- paste0(" ", space, " ")
spaceColor <- "red"
spaceSize <- 10
textxy(spaceLabel, space, col = spaceColor, cex = spaceSize)
}
unique(nodes)
for (node in unique(nodes)) {
outputs <- unique(str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z]\\)"))[[1]])
expectedOutputs <- str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z]\\.,([a-z]|.)\\)"))[[1]]
if (length(outputs) != length(expectedOutputs)) {
nonDeterministicSpaces <- c(nonDeterministicSpaces, outputs)
}
}
unique(str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z]\\)"))[[1]])
unique(str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z]\\,[a-z|-])"))[[1]])
unique(str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z]\\,[a-z|-])"))[[1]])
unique(str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z],[a-z|-]\\)"))[[1]])
unique(str_extract_all(stringUpdated, paste0("\\(", node, ",[A-Z],[a-z|-]\\)"))[[1]])
# Find median life expectancy and maximum GDP per capita in each continent in 1957
lifeGDPContinent <- gapminder %>%
filter(year == 1957) %>%
group_by(continent) %>%
summarise(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
# Find median life expectancy and maximum GDP per capita in each continent in 1957
lifeGDPContinent <- gapminder %>%
filter(year == 1957) %>%
group_by(continent) %>%
summarise(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
library(gapminder)
library(dplyr)
# Find median life expectancy and maximum GDP per capita in each continent in 1957
lifeGDPContinent <- gapminder %>%
filter(year == 1957) %>%
group_by(continent) %>%
summarise(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
ggplot(lifeGDPContinent, aes(x = medianLifeExp, y = maxGdpPercap, color = continent, size = maxGdpPercap)) +
geom_point() +
scale_x_log10()
library(ggplot2)
ggplot(lifeGDPContinent, aes(x = medianLifeExp, y = maxGdpPercap, color = continent, size = maxGdpPercap)) +
geom_point() +
scale_x_log10()
# Find median life expectancy and maximum GDP per capita in each continent in 1957
lifeGDPContinent <- gapminder %>%
filter(year == 2010) %>%
group_by(continent) %>%
summarise(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
gdpPercap
gapminder$gdpPercap
desc(gapminder$year)
max(gapminder$year)
# Find median life expectancy and maximum GDP per capita in each continent in 1957
lifeGDPContinent <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarise(medianLifeExp = median(lifeExp), maxGdpPercap = max(gdpPercap))
ggplot(lifeGDPContinent, aes(x = medianLifeExp, y = maxGdpPercap, color = continent, size = maxGdpPercap)) +
geom_point() +
scale_x_log10()
shiny::runApp('Documents/GitHub/TC2037/ConverterRG2FA/DFA')
